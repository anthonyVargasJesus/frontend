import { Component, Inject, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';
import { ParamMap, Router } from '@angular/router';
import { Vulnerability } from 'app/models/vulnerability';
import { ErrorManager } from 'app/errors/error-manager';
import { VulnerabilityService } from 'app/services/vulnerability.service';
import { MatDialogRef } from '@angular/material/dialog';
import { VulnerabilityTypeService } from 'app/services/vulnerability-type.service';
import { VulnerabilityType } from 'app/models/vulnerability-type';



@Component({
  selector: 'app-add-vulnerability',
  templateUrl: './add-vulnerability.component.html',
  styles: [
  ]
})


export class AddVulnerabilityComponent implements OnInit {

  constructor(
    private vulnerabilityService: VulnerabilityService,

    private _formBuilder: FormBuilder, private dialogRef: MatDialogRef<AddVulnerabilityComponent>, private vulnerabilityTypeService: VulnerabilityTypeService,


  ) { }

  vulnerabilityTypes: VulnerabilityType[] = [];

  vulnerability: Vulnerability;
  loading = false;
  loading2 = false;
  public form: FormGroup;
  public submitted = false;


  ngOnInit(): void {
    this.initForm();
    this.getAllVulnerabilityTypes();

    this.initVulnerability();

  }

  initForm() {
    this.form = this._formBuilder.group({
      vulnerabilityType: ['', [Validators.required,]],
      name: ['', [Validators.required, Validators.maxLength(200),]],
    });
  }

  initVulnerability() {
    this.vulnerability = new Vulnerability();
  }



  getAllVulnerabilityTypes() {
    this.vulnerabilityTypeService.getAll()
      .subscribe((res: any) => {
        this.vulnerabilityTypes = res.data;
        this.initVulnerability();
      }, error => {
        ErrorManager.handleError(error);
      });
  }



  getFormValue() {
    this.vulnerability.vulnerabilityTypeId = this.form.value.vulnerabilityType;
    this.vulnerability.name = this.form.value.name;
  }






  get f() {
    return this.form.controls;
  }

  save() {

    this.submitted = true;
    if (this.form.invalid)
      return;

    this.loading2 = true;
    this.getFormValue();



    this.vulnerabilityService.insert(this.vulnerability)
      .subscribe(res => {
        this.vulnerability = res.data;
        this.loading2 = false;
        this.dialogRef.close({ updated: true });
      }, error => {
        this.loading2 = false;
        ErrorManager.handleError(error);
      });

  } close() {
    this.dialogRef.close();
  }
}

