import { Component, Inject, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';
import { ActivatedRoute, ParamMap, Router } from '@angular/router';
import Swal from 'sweetalert2';
import { Vulnerability } from 'app/models/vulnerability';
import { ErrorManager } from 'app/errors/error-manager';
import { VulnerabilityService } from 'app/services/vulnerability.service';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { VulnerabilityTypeService } from 'app/services/vulnerability-type.service';
import { VulnerabilityType } from 'app/models/vulnerability-type';
import { DialogData } from 'app/models/dialog-data';

@Component({
  selector: 'app-edit-vulnerability',
  templateUrl: './edit-vulnerability.component.html',
  styles: [
  ]
})
export class EditVulnerabilityComponent implements OnInit {

  constructor(
    private vulnerabilityService: VulnerabilityService,
    private route: ActivatedRoute,
    private _formBuilder: FormBuilder,
    public router: Router, private vulnerabilityTypeService: VulnerabilityTypeService,
    @Inject(MAT_DIALOG_DATA) private data: DialogData, private dialogRef: MatDialogRef<EditVulnerabilityComponent>,

  ) { }

  vulnerabilityTypes: VulnerabilityType[] = [];

  vulnerability: Vulnerability;
  loading = false;
  id: string;
  loading2 = false; public form: FormGroup;
  public submitted = false;
  //public last: string = '';

  ngOnInit(): void {
    this.initForm();

    this.getAllVulnerabilityTypes();

    this.initVulnerability();

    this.id = this.data['_id'];
    this.obtain(this.id);


  }


  initVulnerability() {
    this.vulnerability = new Vulnerability();
    this.initVulnerabilityType();
  }
  initVulnerabilityType() {
    if (this.vulnerabilityTypes.length > 0)
      this.vulnerability.vulnerabilityType = this.vulnerabilityTypes[0];
  }


  initForm() {
    this.form = this._formBuilder.group({
      vulnerabilityType: ['', [Validators.required,]],
      name: ['', [Validators.required, Validators.maxLength(200),]],
    });
  }

  obtain(id: string) {
    this.loading = true;
    this.vulnerabilityService.obtain(id)
      .subscribe((res: any) => {
        this.vulnerability = res.data;
        this.setFormValue(this.vulnerability);
        this.loading = false;
      }, error => {
        this.loading = false;
        ErrorManager.handleError(error);
      });
  }

  setFormValue(vulnerability: Vulnerability) {
    this.form.setValue({
      vulnerabilityType: ((vulnerability.vulnerabilityTypeId == null) ? '' : vulnerability.vulnerabilityTypeId),
      name: ((vulnerability.name == null) ? '' : vulnerability.name),
    });
  }


  getFormValue() {
    this.vulnerability.vulnerabilityId = Number(this.id);
    this.vulnerability.vulnerabilityTypeId = this.form.value.vulnerabilityType;
    this.vulnerability.name = this.form.value.name;
  }

  getAllVulnerabilityTypes() {
    this.vulnerabilityTypeService.getAll()
      .subscribe((res: any) => {
        this.vulnerabilityTypes = res.data;
        this.initVulnerability();
      }, error => {
        ErrorManager.handleError(error);
      });
  }


  get f() {
    return this.form.controls;
  }

  save() {

    this.submitted = true;
    if (this.form.invalid)
      return;

    this.loading2 = true;
    this.getFormValue();



    this.vulnerabilityService.update(this.vulnerability)
      .subscribe(res => {
        this.vulnerability = res.data;
        this.dialogRef.close({ updated: true });
        this.loading2 = false;


      }, error => {
        this.loading2 = false;
        ErrorManager.handleError(error);
      });

  }

  close() {
    this.dialogRef.close();
  }

}

